// app/(main)/[slug]/page.tsx
import { getOnlyProduct } from "@/app/api/products/product.api";
import ProductDetail from "@/components/layouts/product_details/ProductDetail";
import { Product } from "@/types/backend";
import { Metadata } from "next";
import { notFound } from "next/navigation";

// Ki·ªÉu props t·ª´ dynamic segment
interface PageProps {
  params: { slug: string };
}

// ‚úÖ SEO metadata ƒë·ªông
export async function generateMetadata({
  params,
}: PageProps): Promise<Metadata> {
  try {
    const productResponse = await getOnlyProduct(params.slug);
    const product = productResponse?.data?.result as Product | undefined;

    if (!product) {
      return {
        title: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i | EGA Mini Mart",
        description: "S·∫£n ph·∫©m b·∫°n t√¨m kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.",
      };
    }

    const title = `${product.name} | EGA Mini Mart`;
    const description =
      product.description?.length > 160
        ? product.description.slice(0, 157) + "..."
        : product.description || `Mua ${product.name} t·∫°i EGA Mini Mart.`;

    const imageUrl =
      product.assets?.[0]?.asset.path || "/images/default-image.jpg";

    return {
      title,
      description,
      openGraph: {
        title,
        description,
        url: `http://localhost:3000/${params.slug}`,
        images: [{ url: imageUrl, width: 800, height: 600 }],
      },
      twitter: {
        card: "summary_large_image",
        title,
        description,
        images: [imageUrl],
      },
    };
  } catch (error) {
    console.error("L·ªói metadata:", error);
    return {
      title: "L·ªói t·∫£i s·∫£n ph·∫©m | EGA Mini Mart",
      description: "Kh√¥ng th·ªÉ hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m l√∫c n√†y.",
    };
  }
}

// ‚úÖ Hi·ªÉn th·ªã trang chi ti·∫øt s·∫£n ph·∫©m
export default async function ProductPage({ params }: PageProps) {
  try {
    const productResponse = await getOnlyProduct(params.slug);
    const product = productResponse?.data?.result as Product | undefined;

    if (!product) {
      notFound(); // üî• Chu·∫©n SEO - chuy·ªÉn v·ªÅ 404
    }

    return <ProductDetail slug={params.slug} initialProduct={product} />;
  } catch (error) {
    console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", error);
    notFound(); // Ho·∫∑c t·∫°o error.tsx n·∫øu mu·ªën trang l·ªói ri√™ng
  }
}
